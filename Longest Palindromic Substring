class Solution:
    def longestPalindrome(self, s: str) -> str:
        def palind(l,r):
            while 0 <= l and r < len(s) and s[l] == s[r]:
                l-=1
                r+=1
            return l+1, r-1
        maxlen = 0
        longestSub = ""
        for i in range(len(s)-1):
            le, ri= palind(i,i+1)
            if ri-le+1 > maxlen:
                maxlen = max(maxlen,ri-le+1 )
                longestSub =s[le:ri+1]
        for j in range(len(s)):
            le,ri =palind(j,j)
            if ri-le+1 > maxlen:
                maxlen = max(maxlen,ri-le+1 )
                longestSub = s[le:ri+1]
        return longestSub
    
# Time Complexity: O(n^2)
# Space Complexity: O(1)
# Successfully implemented on Leetcode
