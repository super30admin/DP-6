//TimeComplexity.    O(n*n)
//Spacecomplexity.   O(1)


class Solution {
    int start = 0;
    int end = 0;
    public String longestPalindrome(String s) {
        
        int n = s.length();
        start = 0;
        end = 0;
        
        for(int i = 0 ; i < n; i++){
            
            
                 extendAround(s, i, i); //odd
       if(i < n-1 && s.charAt(i) == s.charAt(i+1)){
                  extendAround(s, i, i+1); 
            }
            }
         return s.substring(start,end+1);  
    }
    
    public void extendAround(String s, int left, int right){
        
        while((left >=0 && right < s.length()) && s.charAt(left) == s.charAt(right)){
            left--;
            right++;
        }
        left++;
        right--;
        
        if((right - left) > (end - start)){
            end = right;
            start = left;
        }
    }
}
