Approach 1:
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : None


// Your code here along with comments explaining your approach:
In this problem we have to generate the values which has prime factors only 2,3,5.
1)result has the value 1.The next values are generated by being multipying the last result value with the prime numbers.
2)Then we use three pointers index2,index3,index5 to make sure that the values generated by these prime numbers are pushed in sorted order or not.
3)we get the result at n-1 index in result.


# Time complexity --> o(n)
# space complexity --> o(1)
class Solution(object):
    def nthUglyNumber(self, n):
        """
        :type n: int
        :rtype: int
        """
        #greatest n it can have is 1690
        result=[0 for i in range(1690)]
        result[0]=1
        count=1
        #Taking 3 different pointers to point the result of each of the prime numbers
        index2=0
        index3=0
        index5=0
        while count<n:
            #we take the minimum of the values generated by the three prime numbers (2,3,5) as the result array should be sorted.
            result[count]=min(result[index2]*2,result[index3]*3,result[index5]*5)
            #we check of the above three values which was one being the min value was pushed into the result array we increment that pointer to indicate that values generated from that prime was pushed into the result.
            if result[count]==result[index2]*2:
                index2=index2+1
            if result[count]==result[index3]*3:
                index3=index3+1
            if result[count]==result[index5]*5:
                index5=index5+1
            count=count+1
        return result[n-1]
        
Approach 2:
using priority queue
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : None


// Your code here along with comments explaining your approach:
we have used priority queue in this problem to make sure to maintain the output result in sorted order.
we also used set to make sure no duplicate elements are being pushed into the array.
The values generated using the primes are pushed the heap.we used heap to pop the min element from the heap.

# Time complexity --> o(nlogn)
# space complexity --> o(n)
from heapq import heappush,heappop
class Solution(object):
    def nthUglyNumber(self, n):
        """
        :type n: int
        :rtype: int
        """
        d=set()
        list1=[]
        primes=[2,3,5]
        result=[1]
        index=0
        count=1
        while count<n:
            for i in primes:
                #we create the values from the primes (2,3,5) using the value stored in the result.
                val=i*result[index]
                #to make sure not to insert duplicate values in the result array.
                if val not in d:
                    heappush(list1,val)
                    d.add(val)
            # print(len(list1))
            #we are pushing the min value into the result to make sure the output array is in sorted order.
            result.append(heappop(list1))
            index=index+1
            count=count+1
        return result[n-1]

            
            